# Pull Request Validation
# Validates PR requirements and branch naming conventions
name: PR Validation

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Validate branch naming
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo, number } = context.issue;
            
            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: number
            });
            
            const branchName = pr.head.ref;
            const baseBranch = pr.base.ref;
            
            // Branch naming patterns
            const validPatterns = [
              /^feature\/PMP-\d+-[\w-]+$/,     // feature/PMP-123-description
              /^hotfix\/PMP-\d+-[\w-]+$/,      // hotfix/PMP-123-description
              /^bugfix\/PMP-\d+-[\w-]+$/,      // bugfix/PMP-123-description
              /^docs\/[\w-]+$/,                // docs/description
              /^config\/[\w-]+$/,              // config/description
              /^test\/[\w-]+$/,                // test/description
              /^refactor\/[\w-]+$/,            // refactor/description
              /^chore\/[\w-]+$/                // chore/description
            ];
            
            const isValidBranch = validPatterns.some(pattern => pattern.test(branchName));
            
            if (!isValidBranch && baseBranch === 'main') {
              const comment = `❌ **Invalid Branch Name**
              
The branch name \`${branchName}\` doesn't follow our naming conventions.

**Valid patterns:**
- \`feature/PMP-123-description\` - for new features
- \`hotfix/PMP-123-description\` - for critical fixes
- \`bugfix/PMP-123-description\` - for bug fixes
- \`docs/description\` - for documentation changes
- \`config/description\` - for configuration changes
- \`test/description\` - for test-only changes
- \`refactor/description\` - for refactoring
- \`chore/description\` - for maintenance tasks

**For feature/hotfix/bugfix branches:**
- Include the Linear task ID (e.g., PMP-123)
- Use descriptive kebab-case names
- Keep descriptions concise but clear

Please rename your branch or create a new one with the correct naming pattern.`;

              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: comment
              });
              
              // Set status check to failed
              await github.rest.repos.createCommitStatus({
                owner,
                repo,
                sha: pr.head.sha,
                state: 'failure',
                context: 'branch-naming',
                description: 'Branch name does not follow conventions'
              });
              
              core.setFailed('Branch name validation failed');
            } else {
              // Set status check to success
              await github.rest.repos.createCommitStatus({
                owner,
                repo,
                sha: pr.head.sha,
                state: 'success',
                context: 'branch-naming',
                description: 'Branch name follows conventions'
              });
            }
            
      - name: Validate PR template completion
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo, number } = context.issue;
            
            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: number
            });
            
            const body = pr.body || '';
            const title = pr.title;
            
            // Check for required sections
            const requiredSections = [
              { name: 'Summary', pattern: /### Summary/ },
              { name: 'Type of Change', pattern: /### Type of Change/ },
              { name: 'Changes Made', pattern: /### Changes Made/ },
              { name: 'Testing', pattern: /### Testing/ }
            ];
            
            const missingSections = requiredSections.filter(section => 
              !section.pattern.test(body)
            );
            
            // Check if checkboxes are filled
            const hasCheckedBoxes = /- \[x\]/.test(body);
            const hasLinearReference = /PMP-\d+/.test(title + body);
            
            let validationErrors = [];
            
            if (missingSections.length > 0) {
              validationErrors.push(`Missing required sections: ${missingSections.map(s => s.name).join(', ')}`);
            }
            
            if (!hasCheckedBoxes) {
              validationErrors.push('No checkboxes are marked in the PR template');
            }
            
            if (!hasLinearReference) {
              validationErrors.push('No Linear task reference found (PMP-XXX format)');
            }
            
            if (validationErrors.length > 0) {
              const comment = `⚠️ **PR Template Validation Issues**
              
Please address the following issues:

${validationErrors.map(error => `- ${error}`).join('\n')}

**To fix:**
1. Edit your PR description
2. Fill in all required sections
3. Check appropriate boxes in the template
4. Include Linear task reference (PMP-XXX)
5. Provide meaningful descriptions for your changes

This helps maintainers review your PR more efficiently.`;

              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: comment
              });
              
              // Add label for incomplete template
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: number,
                labels: ['needs-template-completion']
              });
            } else {
              // Remove the label if it exists
              try {
                await github.rest.issues.removeLabel({
                  owner,
                  repo,
                  issue_number: number,
                  name: 'needs-template-completion'
                });
              } catch (error) {
                // Label might not exist, ignore error
              }
            }
            
      - name: Check for merge conflicts
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo, number } = context.issue;
            
            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: number
            });
            
            if (pr.mergeable === false) {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: number,
                labels: ['merge-conflict']
              });
              
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: `🔀 **Merge Conflict Detected**
                
This PR has merge conflicts that need to be resolved before it can be merged.

**To resolve:**
1. Sync your branch with the latest changes from the base branch
2. Resolve any conflicts in the affected files
3. Push the resolved changes

\`\`\`bash
git checkout ${pr.head.ref}
git fetch origin
git merge origin/${pr.base.ref}
# Resolve conflicts in your editor
git add .
git commit -m "Resolve merge conflicts"
git push origin ${pr.head.ref}
\`\`\``
              });
            } else if (pr.mergeable === true) {
              // Remove merge conflict label if it exists
              try {
                await github.rest.issues.removeLabel({
                  owner,
                  repo,
                  issue_number: number,
                  name: 'merge-conflict'
                });
              } catch (error) {
                // Label might not exist, ignore error
              }
            }