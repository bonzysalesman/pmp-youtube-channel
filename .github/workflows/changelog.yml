name: Automated Changelog

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to generate changelog for'
        required: false
        type: string
      dry_run:
        description: 'Dry run (do not commit changes)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write

jobs:
  generate-changelog:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Generate changelog (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Generating changelog for version: $VERSION"
          node scripts/generate-changelog.js --version "$VERSION"

      - name: Generate changelog (manual)
        if: github.event_name == 'workflow_dispatch'
        run: |
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "Running in dry-run mode"
            if [ -n "${{ github.event.inputs.version }}" ]; then
              node scripts/generate-changelog.js --version "${{ github.event.inputs.version }}" --dry-run
            else
              node scripts/generate-changelog.js --dry-run
            fi
          else
            if [ -n "${{ github.event.inputs.version }}" ]; then
              node scripts/generate-changelog.js --version "${{ github.event.inputs.version }}"
            else
              node scripts/generate-changelog.js
            fi
          fi

      - name: Generate changelog (on release)
        if: github.event_name == 'release'
        run: |
          VERSION=${{ github.event.release.tag_name }}
          VERSION=${VERSION#v}
          echo "Generating changelog for release: $VERSION"
          node scripts/generate-changelog.js --version "$VERSION"

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in CHANGELOG.md"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.changes.outputs.has_changes == 'true' && github.event.inputs.dry_run != 'true'
        run: |
          git add CHANGELOG.md
          git commit -m "docs: update changelog for ${{ github.event.inputs.version || github.ref_name }}"
          git push origin HEAD:main

      - name: Create Pull Request (for non-main branches)
        if: steps.changes.outputs.has_changes == 'true' && github.ref != 'refs/heads/main' && github.event.inputs.dry_run != 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "docs: update changelog for ${{ github.event.inputs.version || github.ref_name }}"
          title: "üìù Update Changelog for ${{ github.event.inputs.version || github.ref_name }}"
          body: |
            ## Automated Changelog Update
            
            This PR updates the CHANGELOG.md file with the latest changes.
            
            ### Changes
            - Updated CHANGELOG.md with new version entries
            - Generated from conventional commit messages
            - Includes all changes since last release
            
            ### Review Notes
            - Please review the generated changelog entries for accuracy
            - Verify that all significant changes are properly categorized
            - Check that breaking changes are clearly marked
            
            This PR was automatically generated by the changelog workflow.
          branch: changelog/update-${{ github.event.inputs.version || github.ref_name }}
          delete-branch: true

  validate-changelog:
    runs-on: ubuntu-latest
    needs: generate-changelog
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate changelog format
        run: |
          echo "Validating CHANGELOG.md format..."
          
          # Check if changelog exists
          if [ ! -f "CHANGELOG.md" ]; then
            echo "‚ùå CHANGELOG.md not found"
            exit 1
          fi
          
          # Check for required sections
          if ! grep -q "# Changelog" CHANGELOG.md; then
            echo "‚ùå Missing main heading"
            exit 1
          fi
          
          if ! grep -q "## \[Unreleased\]" CHANGELOG.md; then
            echo "‚ùå Missing Unreleased section"
            exit 1
          fi
          
          # Check for proper version format
          if ! grep -qE "## \[[0-9]+\.[0-9]+\.[0-9]+\]" CHANGELOG.md; then
            echo "‚ö†Ô∏è  No versioned entries found (this might be expected for new projects)"
          fi
          
          echo "‚úÖ Changelog format validation passed"

      - name: Check for duplicate entries
        run: |
          echo "Checking for duplicate changelog entries..."
          
          # Extract version headers and check for duplicates
          VERSIONS=$(grep -E "^## \[[0-9]" CHANGELOG.md | sort)
          UNIQUE_VERSIONS=$(echo "$VERSIONS" | uniq)
          
          if [ "$VERSIONS" != "$UNIQUE_VERSIONS" ]; then
            echo "‚ùå Duplicate version entries found:"
            echo "$VERSIONS" | uniq -d
            exit 1
          fi
          
          echo "‚úÖ No duplicate entries found"

      - name: Validate links
        run: |
          echo "Validating changelog links..."
          
          # Check for proper link format at bottom of file
          if grep -q "\[Unreleased\]:" CHANGELOG.md; then
            echo "‚úÖ Unreleased link found"
          else
            echo "‚ö†Ô∏è  No Unreleased link found (consider adding comparison links)"
          fi
          
          # Check for version links
          VERSION_LINKS=$(grep -E "^\[[0-9]+\.[0-9]+\.[0-9]+\]:" CHANGELOG.md | wc -l)
          VERSION_HEADERS=$(grep -E "^## \[[0-9]+\.[0-9]+\.[0-9]+\]" CHANGELOG.md | wc -l)
          
          if [ "$VERSION_LINKS" -eq "$VERSION_HEADERS" ]; then
            echo "‚úÖ All version headers have corresponding links"
          else
            echo "‚ö†Ô∏è  Some version headers may be missing links"
          fi

  update-release-notes:
    runs-on: ubuntu-latest
    needs: generate-changelog
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION=${{ github.event.release.tag_name }}
          VERSION=${VERSION#v}
          
          # Generate release notes using the changelog generator
          RELEASE_NOTES=$(node -e "
            const ChangelogGenerator = require('./scripts/generate-changelog.js');
            const generator = new ChangelogGenerator();
            
            // This would need to be implemented in the generator
            // For now, extract from changelog
            const fs = require('fs');
            const changelog = fs.readFileSync('CHANGELOG.md', 'utf8');
            const versionSection = changelog.match(new RegExp(\`## \\\\[${VERSION}\\\\][\\\\s\\\\S]*?(?=## \\\\[|$)\`));
            
            if (versionSection) {
              console.log(versionSection[0]);
            } else {
              console.log('No changelog entry found for version ${VERSION}');
            }
          ")
          
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update release
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const release_id = context.payload.release.id;
            
            await github.rest.repos.updateRelease({
              owner,
              repo,
              release_id,
              body: `${{ steps.release_notes.outputs.release_notes }}`
            });
            
            console.log('Release notes updated successfully');

  notify-changelog-update:
    runs-on: ubuntu-latest
    needs: [generate-changelog, validate-changelog]
    if: always() && needs.generate-changelog.result == 'success'
    
    steps:
      - name: Notify success
        run: |
          echo "‚úÖ Changelog generation completed successfully"
          echo "üìù CHANGELOG.md has been updated"
          echo "üîç Validation checks passed"

      - name: Notify failure
        if: needs.validate-changelog.result == 'failure'
        run: |
          echo "‚ùå Changelog validation failed"
          echo "Please check the validation logs and fix any issues"
          exit 1