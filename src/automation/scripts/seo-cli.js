#!/usr/bin/env node

const { Command } = require('commander');
const SEOOptimizationEngine = require('./seo-optimization-engine');
const SEOMonitoringSystem = require('./seo-monitoring-system');
const ABTestingFramework = require('./ab-testing-framework');
const fs = require('fs-extra');
const path = require('path');

const program = new Command();

program
  .name('seo-cli')
  .description('SEO optimization and monitoring CLI for PMP YouTube channel')
  .version('1.0.0');

// Initialize systems
let seoEngine, seoMonitoring, abTesting;

async function initializeSystems() {
  try {
    seoEngine = new SEOOptimizationEngine();
    seoMonitoring = new SEOMonitoringSystem();
    abTesting = new ABTestingFramework();
    
    await Promise.all([
      seoEngine.initialize(),
      seoMonitoring.initialize(),
      abTesting.initializeFramework()
    ]);
    
    console.log('‚úÖ SEO systems initialized successfully');
  } catch (error) {
    console.error('‚ùå Error initializing SEO systems:', error.message);
    process.exit(1);
  }
}

// Keyword ranking tracking command
program
  .command('track-rankings')
  .description('Track keyword rankings for target keywords')
  .option('-k, --keywords <keywords>', 'Comma-separated list of keywords to track')
  .option('-o, --output <file>', 'Output file for results')
  .action(async (options) => {
    await initializeSystems();
    
    try {
      const keywords = options.keywords ? options.keywords.split(',').map(k => k.trim()) : null;
      console.log('üîç Tracking keyword rankings...');
      
      const results = await seoMonitoring.trackKeywordRankings(keywords);
      
      console.log(`\nüìä Ranking Results (${results.length} keywords tracked):`);
      results.forEach(result => {
        if (result.error) {
          console.log(`‚ùå ${result.keyword}: Error - ${result.error}`);
        } else {
          console.log(`üìà ${result.keyword}: Position ${result.position} | CTR: ${(result.ctr * 100).toFixed(2)}% | Impressions: ${result.impressions}`);
        }
      });
      
      if (options.output) {
        await fs.writeJson(options.output, results, { spaces: 2 });
        console.log(`\nüíæ Results saved to ${options.output}`);
      }
    } catch (error) {
      console.error('‚ùå Error tracking rankings:', error.message);
      process.exit(1);
    }
  });

// CTR monitoring command
program
  .command('monitor-ctr')
  .description('Monitor click-through rates and generate optimization alerts')
  .option('-d, --days <days>', 'Number of days to analyze', '7')
  .action(async (options) => {
    await initializeSystems();
    
    try {
      console.log('üìä Monitoring click-through rates...');
      
      const ctrData = await seoMonitoring.monitorClickThroughRates();
      
      console.log(`\nüìà CTR Analysis (${ctrData.length} keywords):`);
      ctrData.forEach(data => {
        const trendIcon = data.trend === 'improving' ? 'üìà' : data.trend === 'declining' ? 'üìâ' : '‚û°Ô∏è';
        console.log(`${trendIcon} ${data.keyword}: ${(data.averageCTR * 100).toFixed(2)}% (${data.trend}) | Position: ${data.currentPosition}`);
        
        if (data.recommendations.length > 0) {
          data.recommendations.forEach(rec => {
            console.log(`   üí° ${rec.priority.toUpperCase()}: ${rec.action} - ${rec.reason}`);
          });
        }
      });
      
      // Check for alerts
      const alerts = await seoMonitoring.getRecentAlerts(parseInt(options.days));
      if (alerts.length > 0) {
        console.log(`\nüö® Recent Alerts (${alerts.length}):`);
        alerts.forEach(alert => {
          console.log(`‚ö†Ô∏è  ${alert.type.toUpperCase()}: ${alert.message}`);
        });
      }
    } catch (error) {
      console.error('‚ùå Error monitoring CTR:', error.message);
      process.exit(1);
    }
  });

// Competitor analysis command
program
  .command('analyze-competitors')
  .description('Analyze competitors and identify trending topics')
  .option('-o, --output <file>', 'Output file for analysis results')
  .action(async (options) => {
    await initializeSystems();
    
    try {
      console.log('üîç Analyzing competitors...');
      
      const [competitorAnalysis, trendingTopics] = await Promise.all([
        seoMonitoring.analyzeCompetitors(),
        seoMonitoring.identifyTrendingTopics()
      ]);
      
      console.log(`\nüè¢ Competitor Analysis (${competitorAnalysis.length} competitors):`);
      competitorAnalysis.forEach(competitor => {
        console.log(`\nüìä ${competitor.name}:`);
        console.log(`   üë• Est. Subscribers: ${competitor.metrics.estimatedSubscribers.toLocaleString()}`);
        console.log(`   üìπ Videos: ${competitor.metrics.videoCount}`);
        console.log(`   ‚è±Ô∏è  Avg Duration: ${Math.floor(competitor.metrics.averageViewDuration / 60)}m ${competitor.metrics.averageViewDuration % 60}s`);
        
        console.log(`   üí™ Strengths: ${competitor.strengths.join(', ')}`);
        console.log(`   üéØ Opportunities: ${competitor.opportunities.join(', ')}`);
      });
      
      console.log(`\nüî• Trending Topics (${trendingTopics.length}):`);
      trendingTopics.forEach(topic => {
        console.log(`üìà ${topic.topic}: ${topic.searchVolume} volume | ${topic.opportunity} opportunity`);
        console.log(`   üí° Suggestion: ${topic.suggestedContent}`);
      });
      
      if (options.output) {
        const analysisData = { competitorAnalysis, trendingTopics };
        await fs.writeJson(options.output, analysisData, { spaces: 2 });
        console.log(`\nüíæ Analysis saved to ${options.output}`);
      }
    } catch (error) {
      console.error('‚ùå Error analyzing competitors:', error.message);
      process.exit(1);
    }
  });

// Generate comprehensive SEO report
program
  .command('generate-report')
  .description('Generate comprehensive SEO monitoring report')
  .option('-o, --output <file>', 'Output file for report', 'seo-report.json')
  .action(async (options) => {
    await initializeSystems();
    
    try {
      console.log('üìã Generating comprehensive SEO report...');
      
      const report = await seoMonitoring.generateSEOReport();
      
      console.log('\nüìä SEO Report Summary:');
      console.log(`üìà Keywords Tracked: ${report.summary.totalKeywordsTracked}`);
      console.log(`üéØ Average Position: ${report.summary.averagePosition.toFixed(1)}`);
      console.log(`üëÜ Average CTR: ${(report.summary.averageCTR * 100).toFixed(2)}%`);
      console.log(`üè¢ Competitors Analyzed: ${report.summary.competitorsAnalyzed}`);
      
      console.log('\nüèÜ Top Performing Keywords:');
      report.keywordPerformance.topPerforming.forEach(keyword => {
        console.log(`   üìà ${keyword.keyword}: Position ${keyword.position} | CTR: ${(keyword.ctr * 100).toFixed(2)}%`);
      });
      
      console.log('\n‚ö†Ô∏è  Keywords Needing Improvement:');
      report.keywordPerformance.needsImprovement.forEach(keyword => {
        console.log(`   üìâ ${keyword.keyword}: Position ${keyword.position} | CTR: ${(keyword.ctr * 100).toFixed(2)}%`);
      });
      
      console.log('\nüí° Recommendations:');
      report.recommendations.forEach(rec => {
        console.log(`   ${rec.priority.toUpperCase()}: ${rec.action} (${rec.impact} impact)`);
      });
      
      await fs.writeJson(options.output, report, { spaces: 2 });
      console.log(`\nüíæ Full report saved to ${options.output}`);
    } catch (error) {
      console.error('‚ùå Error generating report:', error.message);
      process.exit(1);
    }
  });

// Optimize video content
program
  .command('optimize-video')
  .description('Optimize video content for SEO')
  .option('-i, --input <file>', 'Input JSON file with video data')
  .option('-o, --output <file>', 'Output file for optimization results')
  .requiredOption('-t, --topic <topic>', 'Video topic')
  .option('-w, --week <week>', 'Week number', '1')
  .option('-d, --day <day>', 'Day number', '1')
  .option('--domain <domain>', 'Domain (people, process, business)', 'process')
  .action(async (options) => {
    await initializeSystems();
    
    try {
      let videoData;
      
      if (options.input) {
        videoData = await fs.readJson(options.input);
      } else {
        videoData = {
          topic: options.topic,
          week: parseInt(options.week),
          day: parseInt(options.day),
          domain: options.domain,
          contentType: 'daily'
        };
      }
      
      console.log(`üéØ Optimizing video: ${videoData.topic}`);
      
      const optimization = await seoEngine.optimizeVideoContent(videoData);
      
      console.log('\nüìù Title Optimization:');
      optimization.optimized.title.slice(0, 3).forEach((title, index) => {
        console.log(`   ${index + 1}. ${title.title} (Score: ${title.optimizationScore}/100)`);
      });
      
      console.log('\nüìÑ Description Optimization:');
      console.log(`   SEO Score: ${optimization.optimized.description.seoScore}/100`);
      console.log(`   Keyword Density: ${(optimization.optimized.description.keywordDensity * 100).toFixed(2)}%`);
      
      console.log('\nüè∑Ô∏è  Tags:');
      console.log(`   ${optimization.optimized.tags.tags.join(', ')}`);
      
      console.log('\nüñºÔ∏è  Thumbnail Variations:');
      optimization.optimized.thumbnail.variations.forEach((thumb, index) => {
        console.log(`   ${index + 1}. ${thumb.style}: ${thumb.text} (${thumb.backgroundColor})`);
      });
      
      console.log('\nüí° Recommendations:');
      optimization.recommendations.forEach(rec => {
        console.log(`   ${rec.priority.toUpperCase()}: ${rec.action} - ${rec.reason}`);
      });
      
      if (options.output) {
        await fs.writeJson(options.output, optimization, { spaces: 2 });
        console.log(`\nüíæ Optimization results saved to ${options.output}`);
      }
    } catch (error) {
      console.error('‚ùå Error optimizing video:', error.message);
      process.exit(1);
    }
  });

program.parse();